'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getExpressRouter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _reactRouter = require('react-router');

var _forEachRoute = require('./forEachRoute');

var _forEachRoute2 = _interopRequireDefault(_forEachRoute);

var _wasMadeUsing = require('./wasMadeUsing');

var _wasMadeUsing2 = _interopRequireDefault(_wasMadeUsing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Gets the express router defined in the react router Route.
 *
 * @param router  {Router}            The route to get the express router from
 *                                    NOTE: React routes can have http sub-routes, but http routes can not have
 *                                    React sub-routes
 *
 * @return        {ExpressRouter}     The router that handles all non page load requests
 */
function getExpressRouter(router) {
  // Skip wrapper components (like react-redux Provider)
  if (!(0, _wasMadeUsing2.default)(router, _reactRouter.Router)) {
    if (_react2.default.Children.count(router.props.children) !== 1) throw new Error('Must be given a single root Router.');
    var child = _react2.default.Children.only(router.props.children);

    return getExpressRouter(child);
  }

  var expressRouter = _express2.default.Router();

  addRouteToRouter(expressRouter, router);
  (0, _forEachRoute2.default)(router, function (route, path) {
    return addRouteToRouter(expressRouter, route, path);
  });

  return expressRouter;
}

function addRouteToRouter(expressRouter, route, path) {
  if (!(0, _wasMadeUsing2.default)(route, _reactRouter.Router) && !(0, _wasMadeUsing2.default)(route, _reactRouter.Route) && !(0, _wasMadeUsing2.default)(route, _reactRouter.IndexRoute)) {
    throw new Error('Invalid component(' + route.type + ') in router @ ' + (path ? path : '/') + '.');
  }

  // Check and add routers for each method
  var routerPropsHas = function routerPropsHas(method) {
    return route.props[method] ? true : false;
  };
  var getArrayOfRouters = function getArrayOfRouters(method) {
    return Array.isArray(route.props[method]) ? route.props[method] : [route.props[method]];
  };

  if (routerPropsHas('use')) {
    var currRouters = getArrayOfRouters('use');

    if (path) expressRouter.use.apply(expressRouter, [path].concat(_toConsumableArray(currRouters)));else expressRouter.use.apply(expressRouter, _toConsumableArray(currRouters));
  }

  if (routerPropsHas('all')) {
    var _currRouters = getArrayOfRouters('all');

    if (path) expressRouter.all.apply(expressRouter, [path].concat(_toConsumableArray(_currRouters)));else expressRouter.all.apply(expressRouter, _toConsumableArray(_currRouters));
  }

  if (routerPropsHas('get')) {
    var _currRouters2 = getArrayOfRouters('get');

    if (path) expressRouter.get.apply(expressRouter, [path].concat(_toConsumableArray(_currRouters2)));else expressRouter.get.apply(expressRouter, _toConsumableArray(_currRouters2));
  }

  if (routerPropsHas('post')) {
    var _currRouters3 = getArrayOfRouters('post');

    if (path) expressRouter.post.apply(expressRouter, [path].concat(_toConsumableArray(_currRouters3)));else expressRouter.post.apply(expressRouter, _toConsumableArray(_currRouters3));
  }

  if (routerPropsHas('put')) {
    var _currRouters4 = getArrayOfRouters('put');

    if (path) expressRouter.put.apply(expressRouter, [path].concat(_toConsumableArray(_currRouters4)));else expressRouter.put.apply(expressRouter, _toConsumableArray(_currRouters4));
  }

  if (routerPropsHas('delete')) {
    var _currRouters5 = getArrayOfRouters('delete');

    if (path) expressRouter.delete.apply(expressRouter, [path].concat(_toConsumableArray(_currRouters5)));else expressRouter.delete.apply(expressRouter, _toConsumableArray(_currRouters5));
  }

  // Check and add router for static files to serve
  if (route.props.src) {
    var staticRouter = _express2.default.static(route.props.src);

    if (path) expressRouter.use(path, staticRouter);else expressRouter.use(staticRouter);
  }
}