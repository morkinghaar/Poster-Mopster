'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = getReactRouterRoute;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _filterChildren = require('./filterChildren');

var _filterChildren2 = _interopRequireDefault(_filterChildren);

var _wasMadeUsing = require('./wasMadeUsing');

var _wasMadeUsing2 = _interopRequireDefault(_wasMadeUsing);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets the react router route without any of the http handler routes.
 *
 * @param router  {Router} The route to remove the http routes from
 *                         NOTE: React routes can have http sub-routes, but http routes can not have React sub-routes
 *
 * @return        {Router} The route with out http handlers
 */
function getReactRouterRoute(router) {
  // Skip wrapper components (like react-redux Provider)
  if (!(0, _wasMadeUsing2.default)(router, _reactRouter.Router)) {
    if (_react2.default.Children.count(router.props.children) !== 1) throw new Error('Must be given a single root Router.');
    var child = _react2.default.Children.only(router.props.children);

    return _react2.default.cloneElement(router, null, getReactRouterRoute(child));
  }

  return (0, _filterChildren2.default)(router, function (route) {
    return containsReactComponent(route);
  });
}

function containsReactComponent(route) {
  if ((0, _wasMadeUsing2.default)(route, _reactRouter.Route) || (0, _wasMadeUsing2.default)(route, _reactRouter.IndexRoute)) {
    var props = route.props;

    // Check if this component has a react component

    if (props.component) return true;

    // Check if the children has a react component
    if (props.children) {
      var _ret = function () {
        var childHasReactComponent = false;
        _react2.default.Children.forEach(props.children, function (child) {
          childHasReactComponent = childHasReactComponent || containsReactComponent(child);
        });
        if (childHasReactComponent) return {
            v: true
          };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
  }

  return false;
}