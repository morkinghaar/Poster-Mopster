'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = handleReactRouter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _getReactRouterRoute = require('./router-traversal/getReactRouterRoute');

var _getReactRouterRoute2 = _interopRequireDefault(_getReactRouterRoute);

var _getExpressRouter = require('./router-traversal/getExpressRouter');

var _getExpressRouter2 = _interopRequireDefault(_getExpressRouter);

var _wasMadeUsing = require('./router-traversal/wasMadeUsing');

var _wasMadeUsing2 = _interopRequireDefault(_wasMadeUsing);

var _addPropsToRouter = require('./addPropsToRouter');

var _addPropsToRouter2 = _interopRequireDefault(_addPropsToRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create an express router for the given react-router routes.
 *
 * @param routes        {ReactRouter}           The router to render
 * @param PageComponent {ReactClass}            A class that takes the render html string, reactHtml, and a
 *                                              express request, req, as a prop and returns markup for the
 *                                              entire page.
 *                                              NOTE: This is render using 'renderToStaticMarkdown(...)' with
 *                                              '<!DOCTYPE html>' placed before it.
 * @param ...propArgs   {Array<Object | Func>}  All arguments after routes is used to add props to the top-level
 *                                              components in the router
 *
 * @return              {ExpressRouter}         The express router to add to the express application
 */
function handleReactRouter(routes,
//ERROR, aperently React.Component<*, *, *> is not a component: "Expected React component instead of React$Component"
PageComponent) {
  for (var _len = arguments.length, propArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    propArgs[_key - 2] = arguments[_key];
  }

  // Check args route
  if (!routes) throw new Error('Route is required for the server');
  if (!PageComponent) throw new Error('PageComponent is required for the server');

  // Combine props
  var getAllProps = function getAllProps(req) {
    var currProps = {};
    propArgs.forEach(function (nextProps) {
      var newProps = typeof nextProps === 'function' ? nextProps(req) : nextProps;

      currProps = _extends({}, currProps, newProps);
    });
    return currProps;
  };

  // Parse Routes
  var reactRouterRoutes = (0, _getReactRouterRoute2.default)(routes);
  var expressRouterFromRoute = (0, _getExpressRouter2.default)(routes);

  // Create express router
  var router = _express2.default.Router();
  //$FlowFixMe
  router.use(expressRouterFromRoute);
  // $FlowFixMe
  router.use(function (req, res, next) {
    // Skip wrapper components (like react-redux Provider)
    var _unwrapRouter = unwrapRouter(reactRouterRoutes),
        routes = _unwrapRouter.routes,
        rewrapRouter = _unwrapRouter.rewrapRouter;

    // Render current route


    (0, _reactRouter.match)({ routes: routes, location: req.url }, function (err, redirectLocation, renderProps) {
      if (err) {
        // Handle errors below
        next(err);
      } else if (redirectLocation) {
        // Handle redirect
        res.redirect(302, redirectLocation.pathname + redirectLocation.search);
      } else if (renderProps) {
        var routerContextElement = _react2.default.createElement(_reactRouter.RouterContext, renderProps);

        // Add props
        if (propArgs.length) routerContextElement = (0, _addPropsToRouter2.default)(routerContextElement, getAllProps(req));

        // Render page with current element from router
        var renderedReactHtml = _server2.default.renderToString(rewrapRouter(routerContextElement));
        var pageHtml = _server2.default.renderToStaticMarkup(
        //TODO, rewrap router agian because match(...) is a horibly written function
        _react2.default.createElement(PageComponent, { req: req, reactHtml: renderedReactHtml }));

        // Send entire page to client
        res.status(isPageNotFoundRoutes(renderProps.routes) ? 404 : 200).send('<!DOCTYPE html> ' + pageHtml);
      } else {
        // Render page with error
        var _pageHtml = _server2.default.renderToStaticMarkup(_react2.default.createElement(PageComponent, { req: req, error: new Error('Invalid url: ' + req.url), is404: true }));

        // Send entire page to client
        res.status(404).send('<!DOCTYPE html> ' + _pageHtml);
      }
    });
  });
  // $FlowFixMe
  router.use(function (err, req, res, next) {
    // Skip this middleware if the request doesn't not accept html
    if (!req.accepts('html')) {
      next(err);
      return;
    }

    // Render page with error
    var pageHtml = _server2.default.renderToStaticMarkup(_react2.default.createElement(PageComponent, { req: req, error: err }));

    // Send entire page to client
    res.status(500).send('<!DOCTYPE html> ' + pageHtml);
  });

  return router;
}

function isPageNotFoundRoutes(routes) {
  var currRoutes = routes[routes.length - 1];
  if (!currRoutes.path) return false;

  // Check if last char is wild chard, NOTE: means any wildcard (non-404) pages must use params
  var lastCharInPath = currRoutes.path.charAt(currRoutes.path.length - 1);
  return lastCharInPath === '*';
}

function unwrapRouter(el, _rewrapRouter) {
  if ((0, _wasMadeUsing2.default)(el, _reactRouter.Router)) {
    return {
      routes: el,
      rewrapRouter: function rewrapRouter(currEl) {
        return _rewrapRouter ? _rewrapRouter(currEl) : currEl;
      }
    };
  }

  if (_react2.default.Children.count(el.props.children) !== 1) throw new Error('Must be given a single root Router.');
  var child = _react2.default.Children.only(el.props.children);

  return unwrapRouter(child, function (childEl) {
    var wrappedEl = _react2.default.cloneElement(el, null, childEl);

    return _rewrapRouter ? _rewrapRouter(wrappedEl) : wrappedEl;
  });
}